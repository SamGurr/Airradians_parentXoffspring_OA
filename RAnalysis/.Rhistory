library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# F1s ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T)
# F1s ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# F1s ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T)
# F1s ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis/Output/Respiration/RR_calc_raw.csv", header=T)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(devtools)
library(ggpubr)
library(hrbrthemes)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T)
resp.ref            <- read.csv(file="Data/Physiology/Respiration/Reference_resp_ID.csv", header=T)
resp.ref
resp.data
# merge the exp_metadata with the resp.data
resp.data_merged                       <- merge(resp.data, resp.ref) %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv",
"SDR_data",
"LoLigo_data"))) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted,Run, Channel, .by_group = TRUE)
resp.data_merged
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
blanks_all_raw <- resp.data_merged %>% # data.frame((merge(resp_all_raw, resp.ref)) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
dplyr::select(c('Date', 'Run', 'Channel','Filename','pH','Lpc', 'Leq', 'Lz','filetype')) %>%
dplyr::arrange(Date,pH, .by_group = TRUE)
resp.data_merged %>% # data.frame((merge(resp_all_raw, resp.ref)) %>%
dplyr::filter(Chamber_tank  == 'blank')
blanks_all_raw <- resp.data_merged %>% # data.frame((merge(resp_all_raw, resp.ref)) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
dplyr::select(c('Date', 'Run', 'Channel','Filename','pH_offspring','Lpc', 'Leq', 'Lz','filetype')) %>%
dplyr::arrange(Date, pH_offspring, .by_group = TRUE)
blanks_all_raw
blanks_all_raw %>%
select(Lpc) %>%
dplyr::mutate(Lpc_filt = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc))# fed F1 foodxOA
blanks_all_raw
blanks_all_raw %>%
select(Lpc) %>%
dplyr::mutate(Lpc_filt = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc))# fed F1 foodxOA
blanks_meansLoLin <- blanks_all_raw %>%
dplyr::group_by(Date, pH_offspring, Run, filetype) %>% # grouped by date, pH, and instrument - similar among Run
#dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::mutate(Lpc_filt = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc)) %>% #  when LPC is positive but veery close to zero - assign as zero
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
#   = sd(abs(Lpc)),
# BLANK.mean_Leq = mean(abs(Leq)),
# BLANK.mean_Lz  = mean(abs(Lz)),
n = n()) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted, Run, pH)
blanks_meansLoLin <- blanks_all_raw %>%
dplyr::group_by(Date, pH_offspring, Run, filetype) %>% # grouped by date, pH, and instrument - similar among Run
#dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::mutate(Lpc = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc)) %>% #  when LPC is positive but veery close to zero - assign as zero
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
#   = sd(abs(Lpc)),
# BLANK.mean_Leq = mean(abs(Leq)),
# BLANK.mean_Lz  = mean(abs(Lz)),
n = n()) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted, Run, pH)
blanks_all_raw %>%
dplyr::group_by(Date, pH_offspring, Run, filetype) %>% # grouped by date, pH, and instrument - similar among Run
#dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::mutate(Lpc = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc)) %>% #  when LPC is positive but veery close to zero - assign as zero
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
#   = sd(abs(Lpc)),
# BLANK.mean_Leq = mean(abs(Leq)),
# BLANK.mean_Lz  = mean(abs(Lz)),
n = n())
blanks_meansLoLin <- blanks_all_raw %>%
dplyr::group_by(Date, pH_offspring, Run, filetype) %>% # grouped by date, pH, and instrument - similar among Run
#dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::mutate(Lpc = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc)) %>% #  when LPC is positive but veery close to zero - assign as zero
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
#   = sd(abs(Lpc)),
# BLANK.mean_Leq = mean(abs(Leq)),
# BLANK.mean_Lz  = mean(abs(Lz)),
n = n()) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted, Run, pH_offspring)
blanks_meansLoLin
blanks_all_raw
# merge the exp_metadata with the resp.data
resp.data_merged                       <- merge(resp.data, resp.ref) %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv",
"SDR_data",
"LoLigo_data"))) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted,Run, Channel, .by_group = TRUE)
resp.data_merged
resp.ref
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(devtools)
library(ggpubr)
library(hrbrthemes)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T)
resp.ref            <- read.csv(file="Data/Physiology/Respiration/Reference_resp_ID.csv", header=T)
# merge the exp_metadata with the resp.data
resp.data_merged                       <- merge(resp.data, resp.ref) %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv",
"SDR_data",
"LoLigo_data"))) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted,Run, Channel, .by_group = TRUE)
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
blanks_all_raw <- resp.data_merged %>% # data.frame((merge(resp_all_raw, resp.ref)) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
dplyr::select(c('Date', 'Run', 'Channel','Filename','pH_offspring','Lpc', 'Leq', 'Lz','filetype')) %>%
dplyr::arrange(Date, pH_offspring, .by_group = TRUE)
blanks_meansLoLin <- blanks_all_raw %>%
dplyr::group_by(Date, pH_offspring, Run, filetype) %>% # grouped by date, pH, and instrument - similar among Run
#dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::mutate(Lpc = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc)) %>% #  when LPC is positive but veery close to zero - assign as zero
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
#   = sd(abs(Lpc)),
# BLANK.mean_Leq = mean(abs(Leq)),
# BLANK.mean_Lz  = mean(abs(Lz)),
n = n()) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted, Run, pH_offspring)
blanks_meansLoLin
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, pH_offspring, Run, filetype) %>% # grouped by date, pH, and instrument - similar among Run
#dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::mutate(Lpc = case_when(Lpc > 0 & Lpc < 0.005 ~ 0,TRUE ~ Lpc)) %>% #  when LPC is positive but veery close to zero - assign as zero
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
#   = sd(abs(Lpc)),
# BLANK.mean_Leq = mean(abs(Leq)),
# BLANK.mean_Lz  = mean(abs(Lz)),
n = n()) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted, Run, pH_offspring)
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Lpc > 0) %>% # remove values with positive O2 - should be none here, double check by removing the '!' and run partial pipeline (found 9/14/2021	pH 8	LoLigo_data	CH1)
dplyr::mutate(resp_blankStand = (abs(Lpc)) - BLANK.mean_Lpc) # %>%  # Lpc =  Lolin calculated resp (used for SMR actual rates), raw value is negative, take the absolute value and subtract from the mean blank Lpc (already abs value)
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH_offspring", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Lpc > 0) %>% # remove values with positive O2 - should be none here, double check by removing the '!' and run partial pipeline (found 9/14/2021	pH 8	LoLigo_data	CH1)
dplyr::mutate(resp_blankStand = (abs(Lpc)) - BLANK.mean_Lpc) # %>%  # Lpc =  Lolin calculated resp (used for SMR actual rates), raw value is negative, take the absolute value and subtract from the mean blank Lpc (already abs value)
Resp.Master
Resp.Master
Resp.Master
# View(Resp.Master[!is.na(Resp.Master$Length_um),])
Resp.Master_OM <- Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
#  convert to rate per individual
dplyr::mutate(resp_umol_hr_indiv = (resp_umol_hr) / Num_indivs) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# pCO2 conditions
dplyr::mutate(pCO2_offspring =
case_when(pH_offspring == 8.0 ~ "500 uatm",
pH_offspring == 7.5 ~ "800 uatm",
pH_offspring == 7.0 ~ "1200 uatm")) %>%
dplyr::mutate(pCO2_parents =
case_when(pH_parents == 8.0 ~ "500 uatm",
pH_parents == 7.5 ~ "800 uatm")) %>%
# diagnostics..
Resp.outliers <- Resp.Master %>% dplyr::filter(resp_blankStand < 0) # call negatives
Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08)
Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )
Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32)
# View(Resp.Master[!is.na(Resp.Master$Length_um),])
Resp.Master_OM <- Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
#  convert to rate per individual
dplyr::mutate(resp_umol_hr_indiv = (resp_umol_hr) / Num_indivs) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# pCO2 conditions
dplyr::mutate(pCO2_offspring =
case_when(pH_offspring == 8.0 ~ "500 uatm",
pH_offspring == 7.5 ~ "800 uatm",
pH_offspring == 7.0 ~ "1200 uatm")) %>%
dplyr::mutate(pCO2_parents =
case_when(pH_parents == 8.0 ~ "500 uatm",
pH_parents == 7.5 ~ "800 uatm"))
Resp.Master_OM
blanks_means
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH_offspring", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Lpc > 0) %>% # remove values with positive O2 - should be none here, double check by removing the '!' and run partial pipeline (found 9/14/2021	pH 8	LoLigo_data	CH1)
dplyr::mutate(resp_blankStand = (abs(Lpc)) - BLANK.mean_Lpc) # %>%  # Lpc =  Lolin calculated resp (used for SMR actual rates), raw value is negative, take the absolute value and subtract from the mean blank Lpc (already abs value)
Resp.Master
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH_offspring", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Lpc > 0) %>% # remove values with positive O2 - should be none here, double check by removing the '!' and run partial pipeline (found 9/14/2021	pH 8	LoLigo_data	CH1)
dplyr::mutate(resp_blankStand = (abs(Lpc)) - BLANK.mean_Lpc) %>%  # Lpc =  Lolin calculated resp (used for SMR actual rates), raw value is negative, take the absolute value and subtract from the mean blank Lpc (already abs value)
dplyr::filter(!Chamber_tank %in% 'blank')
Resp.Master
# View(Resp.Master[!is.na(Resp.Master$Length_um),])
Resp.Master_OM <- Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
#  convert to rate per individual
dplyr::mutate(resp_umol_hr_indiv = (resp_umol_hr) / Num_indivs) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# pCO2 conditions
dplyr::mutate(pCO2_offspring =
case_when(pH_offspring == 8.0 ~ "500 uatm",
pH_offspring == 7.5 ~ "800 uatm",
pH_offspring == 7.0 ~ "1200 uatm")) %>%
dplyr::mutate(pCO2_parents =
case_when(pH_parents == 8.0 ~ "500 uatm",
pH_parents == 7.5 ~ "800 uatm"))
# diagnostics..
Resp.outliers <- Resp.Master %>% dplyr::filter(resp_blankStand < 0) # call negatives
Resp.outliers
Resp.Master_OM
# View(Resp.Master[!is.na(Resp.Master$Length_um),])
Resp.Master_OM <- Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
#  convert to rate per individual
dplyr::mutate(resp_umol_hr_indiv = (resp_umol_hr) / Num_indivs) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# pCO2 conditions
dplyr::mutate(pCO2_offspring =
case_when(pH_offspring == 8.0 ~ "500 uatm",
pH_offspring == 7.5 ~ "800 uatm",
pH_offspring == 7.0 ~ "1200 uatm")) %>%
dplyr::mutate(pCO2_parents =
case_when(pH_parents == 8.0 ~ "500 uatm",
pH_parents == 7.5 ~ "800 uatm")) %>%
dplyr::select(c(Date,pH_offspring))
Resp.Master_OM
# View(Resp.Master[!is.na(Resp.Master$Length_um),])
Resp.Master_OM <- Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
#  convert to rate per individual
dplyr::mutate(resp_umol_hr_indiv = (resp_umol_hr) / Num_indivs) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# pCO2 conditions
dplyr::mutate(pCO2_offspring =
case_when(pH_offspring == 8.0 ~ "500 uatm",
pH_offspring == 7.5 ~ "800 uatm",
pH_offspring == 7.0 ~ "1200 uatm")) %>%
dplyr::mutate(pCO2_parents =
case_when(pH_parents == 8.0 ~ "500 uatm",
pH_parents == 7.5 ~ "800 uatm")) %>%
dplyr::select(c(Date,pH_offspring,pH_parents))
Resp.Master_OM
Resp.Master
# View(Resp.Master[!is.na(Resp.Master$Length_um),])
Resp.Master_OM <- Resp.Master %>%
dplyr::filter(!resp_blankStand < 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = 0.08) %>% # F2 data
# corrected for volume of the chamber and time (respblankstand is in minutes!)
dplyr::mutate(resp_mg_hr   = ( (abs(resp_blankStand)) *  # currently as just mg O2 per minute - DOUBLE CHECK
(volume/1000) * # correct Liters - mg per L per min
60) )  %>% # convert rate per minutes to rate per hour
# convert mg L to minutes L
dplyr::mutate(resp_umol_hr = (resp_mg_hr*1000) / 32) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
#  convert to rate per individual
dplyr::mutate(resp_umol_hr_indiv = (resp_umol_hr) / Num_indivs) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# pCO2 conditions
dplyr::mutate(pCO2_offspring =
case_when(pH_offspring == 8.0 ~ "500 uatm",
pH_offspring == 7.5 ~ "800 uatm",
pH_offspring == 7.0 ~ "1200 uatm")) %>%
dplyr::mutate(pCO2_parents =
case_when(pH_parents == 8.0 ~ "500 uatm",
pH_parents == 7.5 ~ "800 uatm")) %>%
dplyr::select(c(Date,
pCO2_parents,pH_parents,
pCO2_offspring, pH_offspring,
Channel,
Chamber_tank,
Num_indivs,
Lpc,
BLANK.mean_Lpc,
resp_blankStand,
resp_mg_hr,
resp_umol_hr,
resp_umol_hr_indiv,
Filename
))
Resp.Master_OM
# diagnostics..
Resp.outliers <- Resp.Master %>% dplyr::filter(resp_blankStand < 0) # call negatives
#write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis/Output/Respiration/RR_calc_raw.csv")
View(Resp.Master_OM)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis") # personal computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_parentXoffspring_OA/RAnalysis/Output/Respiration/RR_calc_raw.csv", header=T)
SumTable_treatment <- RR_master[!is.na(RR_master$Length_um),] %>%
summarySE(measurevar="Length_mm", groupvars=c("Date","pCO2_parents", "pCO2_offspring"))
SumTable_treatment
SumTable_treatment <- RR_master %>%
summarySE(measurevar="Length_mm", groupvars=c("Date","pCO2_parents", "pCO2_offspring"))
RR_master
SumTable_treatment <- RR_master %>%
summarySE(measurevar="resp_umol_hr_indiv", groupvars=c("Date","pCO2_parents", "pCO2_offspring"))
SumTable_treatment
SumTable_treatment <- RR_master %>%
summarySE(measurevar="resp_umol_hr_indiv", groupvars=c("Date","pCO2_parents", "pCO2_offspring")) %>%
dplyr::arrange(resp_umol_hr_indiv)
SumTable_treatment
aov_mod <- aov(lm(resp_umol_hr_indiv~ pCO2_parents*pCO2_offspring, data = RR_master))
shapiro.test(resid(aov_mod))
levene.test(aov_mod)
leveneTest(aov_mod)
hist(resid(aov_mod))
aov_mod_LOG <- aov(lm(log(resp_umol_hr_indiv)~ pCO2_parents*pCO2_offspring, data = RR_master))
shapiro.test(resid(aov_mod_LOG)) # 0.003548
aov_mod_LOG <- aov(lm(sqrt(resp_umol_hr_indiv)~ pCO2_parents*pCO2_offspring, data = RR_master))
shapiro.test(resid(aov_mod_LOG)) # 0.003548
aov_mod_SQRT <- aov(lm(sqrt(resp_umol_hr_indiv)~ pCO2_parents*pCO2_offspring, data = RR_master))
shapiro.test(resid(aov_mod_SQRT)) # 0.7078
leveneTest(aov_mod_SQRT) # 0.6297
hist(resid(aov_mod_SQRT)) # left skew
summary(aov_mod_SQRT)
summary(aov_mod)
RR_master$pCO2_parents <- factor(RR_master$pCO2_parents, levels = c("500 uatm", "800 uatm"))
RR_master$pCO2_offspring <- factor(RR_master$pCO2_offspring, levels = c("500 uatm", "800 uatm", "1200 uatm"))
# PLOT
BOXPLOT_Length_bfactor.MEAN <- RR_master %>%
ggplot(aes(x = factor(pCO2_parents),
y = resp_umol_hr_indiv,
fill = pCO2_offspring)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Respiration rates - Dhinge larvae") +
theme(axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
BOXPLOT_Length_bfactor.MEAN
# PLOT
BOXPLOT_Length_bfactor.MEAN <- RR_master %>%
ggplot(aes(x = factor(pCO2_parents),
y = resp_umol_hr_indiv*1000,
fill = pCO2_offspring)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Respiration rates - Dhinge larvae") +
theme(axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
BOXPLOT_Length_bfactor.MEAN
